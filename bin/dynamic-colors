#!/usr/bin/env bash
set -e

USAGE="Usage: dynamic-colors [help|cycle|init|list|switch <colorscheme>]"
HELP="\
dynamic-colors <command>

Commands:
  h, help                  print this help message
  c, cycle                 cycle through color schemes
  i, init                  (re)load last color scheme
  l, list                  list available colorschemes
  s, switch <colorscheme>  change terminal colors to <colorscheme>
"

die () {
  echo >&2 "$*"
  exit 1
}

change_color () {
  case $1 in
  color*)
    send_osc 4 "${1#color};$2" ;;
  foreground)
    send_osc 10 "$2" ;;
  background)
    send_osc 11 "$2"
    send_osc 708 "$2"
    ;;
  cursorColor)
    send_osc 12 "$2" ;;
  mouse_foreground)
    send_osc 13 "$2" ;;
  mouse_background)
    send_osc 14 "$2" ;;
  highlight)
    send_osc 17 "$2" ;;
  border)
    send_osc 708 "$2" ;;
  esac
}

send_escape_sequence () {
  escape_sequence="$1"

  # wrap escape sequence when within a TMUX session
  [ -n "$TMUX" ] && escape_sequence="${DSC}tmux;${ESC}${escape_sequence}${ESC}\\"

  echo -ne "${escape_sequence}"
}

send_osc () {
  Ps=$1
  Pt=$2
  command="$OSC$Ps;$Pt$BEL"
  send_escape_sequence "$command"
}

ESC="\033"
BEL="\007"
DSC="${ESC}P"
OSC="${ESC}]"

colors=( background foreground cursorColor mouse_background mouse_foreground highlight border color0 color1 color2 color3 color4 color5 color6 color7 color8 color9 color10 color11 color12 color13 color14 color15 )

if [ -z "${XDG_CONFIG_HOME}" ]; then
  DYNAMIC_COLORS_CONFIG="${HOME}/.config/dynamic-colors"
else
  DYNAMIC_COLORS_CONFIG="${XDG_CONFIG_HOME}/dynamic-colors"
fi

if [ -z "${DYNAMIC_COLORS_COLORSCHEMES}" ]; then
  COLORSCHEMES="${DYNAMIC_COLORS_CONFIG}/colorschemes"
else
  COLORSCHEMES="${DYNAMIC_COLORS_COLORSCHEMES%/}"
fi

write_colorscheme_name () {
  echo "$1" > "${DYNAMIC_COLORS_CONFIG}/colorscheme"
}

load_colorscheme_name () {
  head -1 "${DYNAMIC_COLORS_CONFIG}/colorscheme"
}

init () {
  [ ! -f "${DYNAMIC_COLORS_CONFIG}/colorscheme" ] && return
  colorscheme_name=$(load_colorscheme_name)
  load_colorscheme "$colorscheme_name"
  set_colors
}

set_colors () {
  for color in "${colors[@]}"; do
    [[ ${!color} ]] && change_color "$color" "${!color}"
  done
}

load_colorscheme () {
  [ ! -f "$COLORSCHEMES/$1" ] && die "error: unknown colorscheme '$1'"
  while IFS=: read -r prop value; do
          [[ -n "$value" ]] && printf -v "$prop" "%s" "$value"
  done < <(cpp "$COLORSCHEMES/$1" | tr -d '[:blank:]' | sed -n 's/^\*\.*//p')
}

switch () {
  write_colorscheme_name "$1"
  load_colorscheme "$1"
  set_colors
}

cycle() {
  if [ -f "${DYNAMIC_COLORS_CONFIG}/colorscheme" ]; then
    current=$(head -1 "${DYNAMIC_COLORS_CONFIG}/colorscheme")
    found=false
    cd "$COLORSCHEMES"
    for file in *; do
      if [ $found = true ]; then
        switch "${file}"
        return
      fi
      if [ "$file" = "${current}" ]; then
        found=true
      fi
    done
  fi

  cd "$COLORSCHEMES"
  for file in *; do
    switch "${file}"
    break
  done
}

list () {
  [ ! -d "$COLORSCHEMES" ] && die "error: colorschemes directory '$COLORSCHEMES' doesn't exist"
  cd "$COLORSCHEMES"
  for file in *; do
    echo "${file}"
  done
}

usage () {
  die "$USAGE"
}

help () {
  echo "$HELP"
}

case "$#" in
0)
  usage ;;
*)
  command -v cpp >/dev/null 2>&1 || die "error: cpp preprocessor is required for parsing Xresource files."
  cmd="$1"
  shift
  case "$cmd" in
  h|help)
    help ;;
  l|list)
    list ;;
  i|init)
    init ;;
  s|switch)
    [ $# -ne 1 ] && usage
    switch "$1" ;;
  c|cycle)
    cycle ;;
  *)
    usage ;;
  esac
esac
